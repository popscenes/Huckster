/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.14.3 - 2015-10-23
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.timepicker"]), angular.module("ui.bootstrap.tpls", ["template/timepicker/timepicker.html"]), angular.module("ui.bootstrap.timepicker", []).constant("uibTimepickerConfig", { hourStep: 1, minuteStep: 1, showMeridian: !0, meridians: null, readonlyInput: !1, mousewheel: !0, arrowkeys: !0, showSpinners: !0 }).controller("UibTimepickerController", ["$scope", "$element", "$attrs", "$parse", "$log", "$locale", "uibTimepickerConfig", function (e, n, t, i, r, a, o) { function s() { var n = parseInt(e.hours, 10), t = e.showMeridian ? n > 0 && 13 > n : n >= 0 && 24 > n; return t ? (e.showMeridian && (12 === n && (n = 0), e.meridian === v[1] && (n += 12)), n) : void 0 } function u() { var n = parseInt(e.minutes, 10); return n >= 0 && 60 > n ? n : void 0 } function l(e) { return angular.isDefined(e) && e.toString().length < 2 ? "0" + e : e.toString() } function c(e) { d(), f.$setViewValue(new Date(g)), p(e) } function d() { f.$setValidity("time", !0), e.invalidHours = !1, e.invalidMinutes = !1 } function p(n) { var t = g.getHours(), i = g.getMinutes(); e.showMeridian && (t = 0 === t || 12 === t ? 12 : t % 12), e.hours = "h" === n ? t : l(t), "m" !== n && (e.minutes = l(i)), e.meridian = g.getHours() < 12 ? v[0] : v[1] } function m(e, n) { var t = new Date(e.getTime() + 6e4 * n), i = new Date(e); return i.setHours(t.getHours(), t.getMinutes()), i } function h(e) { g = m(g, e), c() } var g = new Date, f = { $setViewValue: angular.noop }, v = angular.isDefined(t.meridians) ? e.$parent.$eval(t.meridians) : o.meridians || a.DATETIME_FORMATS.AMPMS; e.tabindex = angular.isDefined(t.tabindex) ? t.tabindex : 0, n.removeAttr("tabindex"), this.init = function (n, i) { f = n, f.$render = this.render, f.$formatters.unshift(function (e) { return e ? new Date(e) : null }); var r = i.eq(0), a = i.eq(1), s = angular.isDefined(t.mousewheel) ? e.$parent.$eval(t.mousewheel) : o.mousewheel; s && this.setupMousewheelEvents(r, a); var u = angular.isDefined(t.arrowkeys) ? e.$parent.$eval(t.arrowkeys) : o.arrowkeys; u && this.setupArrowkeyEvents(r, a), e.readonlyInput = angular.isDefined(t.readonlyInput) ? e.$parent.$eval(t.readonlyInput) : o.readonlyInput, this.setupInputEvents(r, a) }; var w = o.hourStep; t.hourStep && e.$parent.$watch(i(t.hourStep), function (e) { w = parseInt(e, 10) }); var b = o.minuteStep; t.minuteStep && e.$parent.$watch(i(t.minuteStep), function (e) { b = parseInt(e, 10) }); var $; e.$parent.$watch(i(t.min), function (e) { var n = new Date(e); $ = isNaN(n) ? void 0 : n }); var M; e.$parent.$watch(i(t.max), function (e) { var n = new Date(e); M = isNaN(n) ? void 0 : n }), e.noIncrementHours = function () { var e = m(g, 60 * w); return e > M || g > e && $ > e }, e.noDecrementHours = function () { var e = m(g, 60 * -w); return $ > e || e > g && e > M }, e.noIncrementMinutes = function () { var e = m(g, b); return e > M || g > e && $ > e }, e.noDecrementMinutes = function () { var e = m(g, -b); return $ > e || e > g && e > M }, e.noToggleMeridian = function () { return g.getHours() < 13 ? m(g, 720) > M : m(g, -720) < $ }, e.showMeridian = o.showMeridian, t.showMeridian && e.$parent.$watch(i(t.showMeridian), function (n) { if (e.showMeridian = !!n, f.$error.time) { var t = s(), i = u(); angular.isDefined(t) && angular.isDefined(i) && (g.setHours(t), c()) } else p() }), this.setupMousewheelEvents = function (n, t) { var i = function (e) { e.originalEvent && (e = e.originalEvent); var n = e.wheelDelta ? e.wheelDelta : -e.deltaY; return e.detail || n > 0 }; n.bind("mousewheel wheel", function (n) { e.$apply(i(n) ? e.incrementHours() : e.decrementHours()), n.preventDefault() }), t.bind("mousewheel wheel", function (n) { e.$apply(i(n) ? e.incrementMinutes() : e.decrementMinutes()), n.preventDefault() }) }, this.setupArrowkeyEvents = function (n, t) { n.bind("keydown", function (n) { 38 === n.which ? (n.preventDefault(), e.incrementHours(), e.$apply()) : 40 === n.which && (n.preventDefault(), e.decrementHours(), e.$apply()) }), t.bind("keydown", function (n) { 38 === n.which ? (n.preventDefault(), e.incrementMinutes(), e.$apply()) : 40 === n.which && (n.preventDefault(), e.decrementMinutes(), e.$apply()) }) }, this.setupInputEvents = function (n, t) { if (e.readonlyInput) return e.updateHours = angular.noop, void (e.updateMinutes = angular.noop); var i = function (n, t) { f.$setViewValue(null), f.$setValidity("time", !1), angular.isDefined(n) && (e.invalidHours = n), angular.isDefined(t) && (e.invalidMinutes = t) }; e.updateHours = function () { var e = s(), n = u(); angular.isDefined(e) && angular.isDefined(n) ? (g.setHours(e), $ > g || g > M ? i(!0) : c("h")) : i(!0) }, n.bind("blur", function () { !e.invalidHours && e.hours < 10 && e.$apply(function () { e.hours = l(e.hours) }) }), e.updateMinutes = function () { var e = u(), n = s(); angular.isDefined(e) && angular.isDefined(n) ? (g.setMinutes(e), $ > g || g > M ? i(void 0, !0) : c("m")) : i(void 0, !0) }, t.bind("blur", function () { !e.invalidMinutes && e.minutes < 10 && e.$apply(function () { e.minutes = l(e.minutes) }) }) }, this.render = function () { var n = f.$viewValue; isNaN(n) ? (f.$setValidity("time", !1), r.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')) : (n && (g = n), $ > g || g > M ? (f.$setValidity("time", !1), e.invalidHours = !0, e.invalidMinutes = !0) : d(), p()) }, e.showSpinners = angular.isDefined(t.showSpinners) ? e.$parent.$eval(t.showSpinners) : o.showSpinners, e.incrementHours = function () { e.noIncrementHours() || h(60 * w) }, e.decrementHours = function () { e.noDecrementHours() || h(60 * -w) }, e.incrementMinutes = function () { e.noIncrementMinutes() || h(b) }, e.decrementMinutes = function () { e.noDecrementMinutes() || h(-b) }, e.toggleMeridian = function () { e.noToggleMeridian() || h(720 * (g.getHours() < 12 ? 1 : -1)) } }]).directive("uibTimepicker", function () { return { restrict: "EA", require: ["uibTimepicker", "?^ngModel"], controller: "UibTimepickerController", controllerAs: "timepicker", replace: !0, scope: {}, templateUrl: function (e, n) { return n.templateUrl || "template/timepicker/timepicker.html" }, link: function (e, n, t, i) { var r = i[0], a = i[1]; a && r.init(a, n.find("input")) } } }), angular.module("ui.bootstrap.timepicker").value("$timepickerSuppressWarning", !1).controller("TimepickerController", ["$scope", "$element", "$attrs", "$controller", "$log", "$timepickerSuppressWarning", function (e, n, t, i, r, a) { a || r.warn("TimepickerController is now deprecated. Use UibTimepickerController instead."), angular.extend(this, i("UibTimepickerController", { $scope: e, $element: n, $attrs: t })) }]).directive("timepicker", ["$log", "$timepickerSuppressWarning", function (e, n) { return { restrict: "EA", require: ["timepicker", "?^ngModel"], controller: "TimepickerController", controllerAs: "timepicker", replace: !0, scope: {}, templateUrl: function (e, n) { return n.templateUrl || "template/timepicker/timepicker.html" }, link: function (t, i, r, a) { n || e.warn("timepicker is now deprecated. Use uib-timepicker instead."); var o = a[0], s = a[1]; s && o.init(s, i.find("input")) } } }]), angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function (e) { e.put("template/timepicker/timepicker.html", '<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n') }]);